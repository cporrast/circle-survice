[gd_scene load_steps=4 format=3 uid="uid://53nt1egwiqiw"]

[ext_resource type="PackedScene" uid="uid://c1nssl1u7t7ni" path="res://scenes/bullet/StraightBullet/straight_bullet.tscn" id="1_2hefh"]
[ext_resource type="PackedScene" uid="uid://5goaiapipttd" path="res://scenes/bullet/BouncyBullet/bouncy_bullet.tscn" id="2_5nw7v"]

[sub_resource type="GDScript" id="GDScript_6jy35"]
script/source = "extends Node

@export var straight_bullet_scene: PackedScene
@export var bouncy_bullet_scene: PackedScene

var time_accumulator := 0.0
var wave := 1

@onready var arena := get_parent().get_node(\"Arena\")

		
func _process(delta):
	time_accumulator += delta
	if time_accumulator >= 2.0:
		spawn_bullets(wave)
		time_accumulator = 0.0
		wave += 1

func spawn_bullets(count: int):
	for i in count:
		var is_bouncy = randf() < 0.3

		var scene: PackedScene
		if is_bouncy:
			scene = bouncy_bullet_scene
		else:
			scene = straight_bullet_scene

		var bullet = scene.instantiate()

		var spawn_pos = get_spawn_position()
		var base_dir = (arena.global_position - spawn_pos).normalized()
		var angle_offset = deg_to_rad(randf_range(-20.0, 20.0))
		var dir = base_dir.rotated(angle_offset)

		bullet.global_position = spawn_pos
		bullet.set_direction(dir)
		get_tree().current_scene.add_child(bullet)

		# âœ… Score goes up for every bullet spawned
		get_tree().current_scene.get_node(\"ScoreManager\").add_bullet()

func get_spawn_position() -> Vector2:
	var angle = randf() * TAU
	var radius = arena.arena_radius + 200  # spawn outside the arena
	return arena.global_position + Vector2(cos(angle), sin(angle)) * radius
"

[node name="BulletSpawner" type="Node"]
script = SubResource("GDScript_6jy35")
straight_bullet_scene = ExtResource("1_2hefh")
bouncy_bullet_scene = ExtResource("2_5nw7v")
